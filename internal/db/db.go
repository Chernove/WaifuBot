// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query createUser: %w", err)
	}
	if q.getCharStmt, err = db.PrepareContext(ctx, getChar); err != nil {
		return nil, fmt.Errorf("error preparing query getChar: %w", err)
	}
	if q.getCharsStmt, err = db.PrepareContext(ctx, getChars); err != nil {
		return nil, fmt.Errorf("error preparing query getChars: %w", err)
	}
	if q.getCharsWhoseIDStartWithStmt, err = db.PrepareContext(ctx, getCharsWhoseIDStartWith); err != nil {
		return nil, fmt.Errorf("error preparing query getCharsWhoseIDStartWith: %w", err)
	}
	if q.getProfileStmt, err = db.PrepareContext(ctx, getProfile); err != nil {
		return nil, fmt.Errorf("error preparing query getProfile: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query getUser: %w", err)
	}
	if q.giveCharStmt, err = db.PrepareContext(ctx, giveChar); err != nil {
		return nil, fmt.Errorf("error preparing query giveChar: %w", err)
	}
	if q.insertCharStmt, err = db.PrepareContext(ctx, insertChar); err != nil {
		return nil, fmt.Errorf("error preparing query insertChar: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getCharStmt != nil {
		if cerr := q.getCharStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharStmt: %w", cerr)
		}
	}
	if q.getCharsStmt != nil {
		if cerr := q.getCharsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharsStmt: %w", cerr)
		}
	}
	if q.getCharsWhoseIDStartWithStmt != nil {
		if cerr := q.getCharsWhoseIDStartWithStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharsWhoseIDStartWithStmt: %w", cerr)
		}
	}
	if q.getProfileStmt != nil {
		if cerr := q.getProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.giveCharStmt != nil {
		if cerr := q.giveCharStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing giveCharStmt: %w", cerr)
		}
	}
	if q.insertCharStmt != nil {
		if cerr := q.insertCharStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertCharStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createUserStmt               *sql.Stmt
	getCharStmt                  *sql.Stmt
	getCharsStmt                 *sql.Stmt
	getCharsWhoseIDStartWithStmt *sql.Stmt
	getProfileStmt               *sql.Stmt
	getUserStmt                  *sql.Stmt
	giveCharStmt                 *sql.Stmt
	insertCharStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createUserStmt:               q.createUserStmt,
		getCharStmt:                  q.getCharStmt,
		getCharsStmt:                 q.getCharsStmt,
		getCharsWhoseIDStartWithStmt: q.getCharsWhoseIDStartWithStmt,
		getProfileStmt:               q.getProfileStmt,
		getUserStmt:                  q.getUserStmt,
		giveCharStmt:                 q.giveCharStmt,
		insertCharStmt:               q.insertCharStmt,
	}
}
